% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/orf_functions.R
\name{causal_online_random_forest}
\alias{causal_online_random_forest}
\title{Causal Online Random Forest}
\usage{
causal_online_random_forest(x, y, treat, numRandomTests, counterThreshold,
  maxDepth, numTrees, numEpochs, type = "classification",
  method = "gini", causal = TRUE, findTrainError = FALSE,
  verbose = FALSE, trainModel = TRUE)
}
\arguments{
\item{x}{A matrix of features on which to generate predictions.}

\item{y}{Vector of classes.  Multiclass classification is supported.  Must be integers.}

\item{treat}{Vector of treatment assignment.  Must be values of 0 or 1. Multiple treatments are not supported at this time.}

\item{numRandomTests}{Number of random tests, i.e., number of features to be selected at each node for evaluation.}

\item{counterThreshold}{Threshold for number of observations before a split will occur.}

\item{maxDepth}{Maximum depth for each tree.}

\item{numTrees}{Number of trees in the forest.}

\item{numEpochs}{Number of epochs for processing during each training step.}

\item{type}{Type of Random Forest.  Only `classification` is implemented at this time.}

\item{method}{Method used for determining if a node should split.  Implemented methods are `gini` for Gini Impurity or `entropy` for entropy.}

\item{causal}{Should the forest be fit in a causal way?  Default=TRUE. Note: not meaningful when set to FALSE.  Included for code compatibility.}

\item{findTrainError}{Should the algorithm find the out of bag error on the training set?  Default=TRUE.}

\item{verbose}{verbose output (warning: may call cout from C++)}

\item{trainModel}{Should the forest be trained on the new data?
Defaults to TRUE.  Useful for testing.}
}
\description{
This function initializes and fits a causal online random forest from a matrix of
features and a vector of outcomes.
}
\details{
This function provides an alternative method for using the
  algorithm, as opposed to using \code{\link{init_orf}} and
  \code{\link{train_orf}}.  Note that unlike the init/train method this call
  to the algorithm will automatically identify the number of features,
  classes, and labels in the provided data.
  
  Implemented methods are \code{method="gini"} for Gini Impurity
  (\code{p*(1-p)}), \code{method="entropy"} for entropy (\code{p*log_2(p)}),
  or \code{method="hellinger"} for the Hellinger distance between the rate
  at the node and the overall population (\code{sqrt(p) - sqrt(q)}).
  Defaults to \code{gini}.
}
\examples{
## simulate a data point with 10 columns
x <- matrix(runif(10), nrow=1)
y <- matrix(0)
w <- matrix(1)

## fit the model object
orfmod <-  causal_online_random_forest(x=x, y=y, treat=w,
                                       numRandomTests = 2,
                                       counterThreshold = 10, 
                                       maxDepth = 5, 
                                       numTrees = 10,
                                       numEpochs = 1)


}
\seealso{
\code{\link{init_orf}} for initializing the orf object, \code{\link{train_orf}} for training the orf object
}
