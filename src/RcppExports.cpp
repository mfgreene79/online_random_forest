// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;
using namespace std;


// causal_online_random_forest
List causal_online_random_forest(Eigen::MatrixXd x, Eigen::VectorXd y, Eigen::VectorXd treat, int numRandomTests, int counterThreshold, int maxDepth, int numTrees, int numEpochs, string type, string method, bool causal, bool findTrainError, bool verbose, bool trainModel);
RcppExport SEXP _corf_causal_online_random_forest(SEXP xSEXP, SEXP ySEXP, SEXP treatSEXP, SEXP numRandomTestsSEXP, SEXP counterThresholdSEXP, SEXP maxDepthSEXP, SEXP numTreesSEXP, SEXP numEpochsSEXP, SEXP typeSEXP, SEXP methodSEXP, SEXP causalSEXP, SEXP findTrainErrorSEXP, SEXP verboseSEXP, SEXP trainModelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type treat(treatSEXP);
    Rcpp::traits::input_parameter< int >::type numRandomTests(numRandomTestsSEXP);
    Rcpp::traits::input_parameter< int >::type counterThreshold(counterThresholdSEXP);
    Rcpp::traits::input_parameter< int >::type maxDepth(maxDepthSEXP);
    Rcpp::traits::input_parameter< int >::type numTrees(numTreesSEXP);
    Rcpp::traits::input_parameter< int >::type numEpochs(numEpochsSEXP);
    Rcpp::traits::input_parameter< string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< bool >::type causal(causalSEXP);
    Rcpp::traits::input_parameter< bool >::type findTrainError(findTrainErrorSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type trainModel(trainModelSEXP);
    rcpp_result_gen = Rcpp::wrap(causal_online_random_forest(x, y, treat, numRandomTests, counterThreshold, maxDepth, numTrees, numEpochs, type, method, causal, findTrainError, verbose, trainModel));
    return rcpp_result_gen;
END_RCPP
}
// online_random_forest
List online_random_forest(Eigen::MatrixXd x, Eigen::VectorXd y, int numRandomTests, int counterThreshold, int maxDepth, int numTrees, int numEpochs, string type, string method, bool findTrainError, bool verbose, bool trainModel);
RcppExport SEXP _corf_online_random_forest(SEXP xSEXP, SEXP ySEXP, SEXP numRandomTestsSEXP, SEXP counterThresholdSEXP, SEXP maxDepthSEXP, SEXP numTreesSEXP, SEXP numEpochsSEXP, SEXP typeSEXP, SEXP methodSEXP, SEXP findTrainErrorSEXP, SEXP verboseSEXP, SEXP trainModelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type numRandomTests(numRandomTestsSEXP);
    Rcpp::traits::input_parameter< int >::type counterThreshold(counterThresholdSEXP);
    Rcpp::traits::input_parameter< int >::type maxDepth(maxDepthSEXP);
    Rcpp::traits::input_parameter< int >::type numTrees(numTreesSEXP);
    Rcpp::traits::input_parameter< int >::type numEpochs(numEpochsSEXP);
    Rcpp::traits::input_parameter< string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< bool >::type findTrainError(findTrainErrorSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type trainModel(trainModelSEXP);
    rcpp_result_gen = Rcpp::wrap(online_random_forest(x, y, numRandomTests, counterThreshold, maxDepth, numTrees, numEpochs, type, method, findTrainError, verbose, trainModel));
    return rcpp_result_gen;
END_RCPP
}
// orf
List orf(Eigen::MatrixXd x, Eigen::VectorXd y, List orfModel, bool trainModel);
RcppExport SEXP _corf_orf(SEXP xSEXP, SEXP ySEXP, SEXP orfModelSEXP, SEXP trainModelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type orfModel(orfModelSEXP);
    Rcpp::traits::input_parameter< bool >::type trainModel(trainModelSEXP);
    rcpp_result_gen = Rcpp::wrap(orf(x, y, orfModel, trainModel));
    return rcpp_result_gen;
END_RCPP
}
// corf
List corf(Eigen::MatrixXd x, Eigen::VectorXd y, Eigen::VectorXd treat, List orfModel, bool trainModel);
RcppExport SEXP _corf_corf(SEXP xSEXP, SEXP ySEXP, SEXP treatSEXP, SEXP orfModelSEXP, SEXP trainModelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type treat(treatSEXP);
    Rcpp::traits::input_parameter< List >::type orfModel(orfModelSEXP);
    Rcpp::traits::input_parameter< bool >::type trainModel(trainModelSEXP);
    rcpp_result_gen = Rcpp::wrap(corf(x, y, treat, orfModel, trainModel));
    return rcpp_result_gen;
END_RCPP
}
// predictOrf
List predictOrf(Eigen::MatrixXd x, List orfModel, bool iteAll);
RcppExport SEXP _corf_predictOrf(SEXP xSEXP, SEXP orfModelSEXP, SEXP iteAllSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type orfModel(orfModelSEXP);
    Rcpp::traits::input_parameter< bool >::type iteAll(iteAllSEXP);
    rcpp_result_gen = Rcpp::wrap(predictOrf(x, orfModel, iteAll));
    return rcpp_result_gen;
END_RCPP
}
// roundup
int roundup(double x);
RcppExport SEXP _corf_roundup(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(roundup(x));
    return rcpp_result_gen;
END_RCPP
}
// causal_orf_cv
List causal_orf_cv(Eigen::MatrixXd x, Eigen::VectorXd y, Eigen::VectorXd treat, int numClasses, int numRandomTests, int counterThreshold, int maxDepth, int numTrees, int numEpochs, int nfolds, std::string type, std::string method);
RcppExport SEXP _corf_causal_orf_cv(SEXP xSEXP, SEXP ySEXP, SEXP treatSEXP, SEXP numClassesSEXP, SEXP numRandomTestsSEXP, SEXP counterThresholdSEXP, SEXP maxDepthSEXP, SEXP numTreesSEXP, SEXP numEpochsSEXP, SEXP nfoldsSEXP, SEXP typeSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type treat(treatSEXP);
    Rcpp::traits::input_parameter< int >::type numClasses(numClassesSEXP);
    Rcpp::traits::input_parameter< int >::type numRandomTests(numRandomTestsSEXP);
    Rcpp::traits::input_parameter< int >::type counterThreshold(counterThresholdSEXP);
    Rcpp::traits::input_parameter< int >::type maxDepth(maxDepthSEXP);
    Rcpp::traits::input_parameter< int >::type numTrees(numTreesSEXP);
    Rcpp::traits::input_parameter< int >::type numEpochs(numEpochsSEXP);
    Rcpp::traits::input_parameter< int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(causal_orf_cv(x, y, treat, numClasses, numRandomTests, counterThreshold, maxDepth, numTrees, numEpochs, nfolds, type, method));
    return rcpp_result_gen;
END_RCPP
}
// orf_cv
List orf_cv(Eigen::MatrixXd x, Eigen::VectorXd y, int numClasses, int numRandomTests, int counterThreshold, int maxDepth, int numTrees, int numEpochs, int nfolds, std::string type, std::string method);
RcppExport SEXP _corf_orf_cv(SEXP xSEXP, SEXP ySEXP, SEXP numClassesSEXP, SEXP numRandomTestsSEXP, SEXP counterThresholdSEXP, SEXP maxDepthSEXP, SEXP numTreesSEXP, SEXP numEpochsSEXP, SEXP nfoldsSEXP, SEXP typeSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type numClasses(numClassesSEXP);
    Rcpp::traits::input_parameter< int >::type numRandomTests(numRandomTestsSEXP);
    Rcpp::traits::input_parameter< int >::type counterThreshold(counterThresholdSEXP);
    Rcpp::traits::input_parameter< int >::type maxDepth(maxDepthSEXP);
    Rcpp::traits::input_parameter< int >::type numTrees(numTreesSEXP);
    Rcpp::traits::input_parameter< int >::type numEpochs(numEpochsSEXP);
    Rcpp::traits::input_parameter< int >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(orf_cv(x, y, numClasses, numRandomTests, counterThreshold, maxDepth, numTrees, numEpochs, nfolds, type, method));
    return rcpp_result_gen;
END_RCPP
}
// getImps_
Eigen::VectorXd getImps_(List orfModel);
RcppExport SEXP _corf_getImps_(SEXP orfModelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type orfModel(orfModelSEXP);
    rcpp_result_gen = Rcpp::wrap(getImps_(orfModel));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_corf_causal_online_random_forest", (DL_FUNC) &_corf_causal_online_random_forest, 14},
    {"_corf_online_random_forest", (DL_FUNC) &_corf_online_random_forest, 12},
    {"_corf_orf", (DL_FUNC) &_corf_orf, 4},
    {"_corf_corf", (DL_FUNC) &_corf_corf, 5},
    {"_corf_predictOrf", (DL_FUNC) &_corf_predictOrf, 3},
    {"_corf_roundup", (DL_FUNC) &_corf_roundup, 1},
    {"_corf_causal_orf_cv", (DL_FUNC) &_corf_causal_orf_cv, 12},
    {"_corf_orf_cv", (DL_FUNC) &_corf_orf_cv, 11},
    {"_corf_getImps_", (DL_FUNC) &_corf_getImps_, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_corf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
